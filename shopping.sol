// SPDX-License-Identifier: SEE LICENSE IN LICENSE
pragma solidity ^0.8.0;

contract Shopping {
//In this I have created a cart structure where buyer can store ingo like prices, quantity:
    struct Products {
        string name;
        uint id;
        uint price;
        uint quantity;
    }

// In this we are mapping through Products structure:
    mapping(uint => Products) public products;

// Address of the owner of the contract
    address owner;

// Counter to track the total number of products
    uint count;

//only Owner can call this:
    modifier onlyOwner() {
        require(owner == msg.sender, "Only owner can set that");
        _;
    }

// Constructor to set the contract owner
    constructor() {
        owner = msg.sender;
    }

//This event will trigger wheen we add products - name, id, price of product:
    event ProductAdded(string _name, uint _id, uint _price, uint _quantity);

 //This event triggers when someone buy some products:   
    event ProductBuy(uint _id, uint _quantity);

//This function only called by buyer who is buying various items:(I have used `onlyOwner` modifier);
    function productAdded(string memory _name, uint _price, uint _quantity) public onlyOwner{
        count++;
        products[count] = Products(_name, count, _price, _quantity);
        emit ProductAdded(_name, count, _price, _quantity);
    }

//This function is basicalls perform some perations like id of products and pay prices to the seller:
    function productBuy(uint _id, uint _quantity) public payable {
        products[_id].quantity -= _quantity;
        payable(owner).transfer(msg.value);
        emit  ProductBuy(_id, _quantity);
    }

//This function return total bill generated by buyer:
    function Total(uint256 _id, uint256 _quantity) public view returns(uint256) {
        return products[_id].price * _quantity;
    }
}